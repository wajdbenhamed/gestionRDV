                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        # [4.0.0](https://github.com/blesh/symbol-observable/compare/3.0.0...4.0.0) (2021-04-15)


### Bug Fixes

* If Symbol.for doesn't exist, just use Symbol ([ef81924](https://github.com/blesh/symbol-observable/commit/ef81924c506ba2fcc171a9b9b78a7a290fbff7b2)), closes [#53](https://github.com/blesh/symbol-observable/issues/53)


### Code Refactoring

* Revert to `symbol` from `unique symbol`, the latter caused compatibility issues and provided no real benefit. ([72ce7dc](https://github.com/blesh/symbol-observable/commit/72ce7dcc5d22f8a67ec928b61e879e1ded7a0869))


### BREAKING CHANGES

* Following the advice of the TypeScript team, the type for `Symbol.observable` is reverted back to `symbol` from `unique symbol`. This is to improve compatibility with other libraries using this module. Sincerely sorry for the trashing. Getting the types right for modules is hard. If this continues to cause issues for you, please file an issue with the [TypeScript project](https://github.com/microsoft/typescript).



# [3.0.0](https://github.com/blesh/symbol-observable/compare/2.0.3...3.0.0) (2020-11-02)


### Bug Fixes

* **TypeScript:** `Symbol.observable` is now `unique symbol`. ([2ef1476](https://github.com/blesh/symbol-observable/commit/2ef147644cf78538b28c3fd9e66a3b8d569a1978)), closes [#41](https://github.com/blesh/symbol-observable/issues/41)
* **TypeScript:** `Symbol[Symbol.observable]` is no longer incorrectly defined ([fe4301f](https://github.com/blesh/symbol-observable/commit/fe4301f37b54162e1a2db91e79c5b33d652496f1))


### BREAKING CHANGES

* **TypeScript:** Older versions of `@types/node` will clash with this, because `@types/node` incorrectly defined `Symbol.observable` has `symbol` and not `unique symbol`. Update to `@types/node@14.14.6` or higher.



## [2.0.3](https://github.com/blesh/symbol-observable/compare/2.0.2...2.0.3) (2020-09-30)

### Bug Fixes

- **package.json** ponyfill.d.ts added to package ([b25f5bf](https://github.com/blesh/symbol-observable/commit/b25f5bfe7425ad21f510428795de8b38aee70b2e))

## [2.0.2](https://github.com/blesh/symbol-observable/compare/2.0.1...2.0.2) (2020-09-29)

### Bug Fixes

- **TypeScript** ponyfill types added ([10d2ec8](https://github.com/blesh/symbol-observable/commit/10d2ec8f0809ac9134be91378fc45c3578f675d4))

## [2.0.1](https://github.com/blesh/symbol-observable/compare/2.0.0...2.0.1) (2020-09-04)

### Bug Fixes

- **package.json:** es/ponyfill.js no longer typoed ([ad2c079](https://github.com/blesh/symbol-observable/commit/ad2c079c71536eaf972101a25eb18f5bca94ab62))
- Resolve issues in environments with frozen Symbol ([2323882](https://github.com/blesh/symbol-observable/commit/23238827ea234188b11774f43afcb5c8deeb278e))

# [2.0.0](https://github.com/blesh/symbol-observable/compare/1.2.0...2.0.0) (2020-09-01)

###